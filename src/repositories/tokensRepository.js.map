{"version":3,"file":"tokensRepository.js","sourceRoot":"","sources":["tokensRepository.ts"],"names":[],"mappings":";;;AACA,sDAAmE;AACnE,oDAA4C;AAC5C,mCAAqC;AACrC,0DAA8D;AAC9D,8DAIkC;AAClC,4CAAwC;AAExC,MAAa,gBAAiB,SAAQ,kBAAU;IAC5C;QACI,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,SAAS,GAAG,GAAG,oBAAQ,SAAS,CAAC;IAC1C,CAAC;IAED;;;;;;;OAOG;IACH,KAAK,CAAC,GAAG,CAAC,EACN,SAAS,EACT,WAAW,EACX,YAAY,EACZ,cAAc,EACd,MAAM,GACD;QACL,MAAM,kBAAkB,GAAG,IAAA,6BAAe,EAAC;YACvC,SAAS;YACT,WAAW;YACX,YAAY;YACZ,cAAc;YACd,MAAM;YACN,SAAS,EAAE,IAAA,wBAAU,GAAE;SAC1B,CAAC,CAAC;QACH,MAAM,KAAK,GAAG;YACV,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,IAAI,EAAE,IAAA,wBAAQ,EAAC,kBAAkB,CAAC;SACrC,CAAC;QACF,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;QACnC,MAAM,EACF,SAAS,EAAE,EAAE,cAAc,EAAE,GAChC,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,gCAAc,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,kBAAK,CAAC,CAAC;QACtE,OAAO,cAAc,KAAK,GAAG,CAAC;IAClC,CAAC;IAED,KAAK,CAAC,GAAG,CAAC,KAAa;QACnB,MAAM,KAAK,GAAG;YACV,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,gBAAgB,EAAE,IAAI;YACtB,sBAAsB,EAAE,wBAAwB;YAChD,yBAAyB,EAAE,IAAA,wBAAQ,EAAC;gBAChC,YAAY,EAAE,KAAK;aACtB,CAAC;SACL,CAAC;QACF,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QAC/B,MAAM,EACF,KAAK,EAAE,CAAC,KAAK,CAAC,GACjB,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,8BAAY,CAAC,KAAK,CAAC,CAAC,CAAC;QACvD,OAAO,IAAA,0BAAU,EAAC,KAAK,CAAW,CAAC;IACvC,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,IAAI;QACb,MAAM,KAAK,GAAG;YACV,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,GAAG,EAAE,IAAA,wBAAQ,EAAC,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;SACrC,CAAC;QACF,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;QACnC,MAAM,EACF,SAAS,EAAE,EAAE,cAAc,EAAE,GAChC,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,mCAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;QAC5D,OAAO,cAAc,KAAK,GAAG,CAAC;IAClC,CAAC;CACJ;AAnED,4CAmEC","sourcesContent":["import { IToken } from '../interfaces';\nimport { preMarshallPrep, getDateNow } from '../utils/dynamoUtils';\nimport { logIt } from '../utils/logItUtils';\nimport { Repository } from './index';\nimport { marshall, unmarshall } from '@aws-sdk/util-dynamodb';\nimport {\n    DeleteItemCommand,\n    PutItemCommand,\n    QueryCommand,\n} from '@aws-sdk/client-dynamodb';\nimport { NODE_ENV } from '../constants';\n\nexport class TokensRepository extends Repository {\n    constructor() {\n        super();\n        this.tableName = `${NODE_ENV}-tokens`;\n    }\n\n    /**\n     *\n     * @param csrfState PK and guid - gets compared for security\n     * @param accessToken Token for interacting with upload api\n     * @param refreshToken Token used to refresh the access token\n     * @param expirationDate\n     * @param source Enum UPLOAD_PLATFORMS\n     */\n    async put({\n        csrfState,\n        accessToken,\n        refreshToken,\n        expirationDate,\n        source,\n    }: IToken): Promise<Boolean> {\n        const preMarshalledToken = preMarshallPrep({\n            csrfState,\n            accessToken,\n            refreshToken,\n            expirationDate,\n            source,\n            createdAt: getDateNow(),\n        });\n        const query = {\n            TableName: this.tableName,\n            Item: marshall(preMarshalledToken),\n        };\n        console.log('createQuery>', query);\n        const {\n            $metadata: { httpStatusCode },\n        } = await this.docClient.send(new PutItemCommand(query)).catch(logIt);\n        return httpStatusCode === 200;\n    }\n\n    async get(state: string): Promise<IToken> {\n        const query = {\n            TableName: this.tableName,\n            ScanIndexForward: true,\n            KeyConditionExpression: 'csrfState = :csrfState',\n            ExpressionAttributeValues: marshall({\n                ':csrfState': state,\n            }),\n        };\n        console.log('getToken', query);\n        const {\n            Items: [token],\n        } = await this.docClient.send(new QueryCommand(query));\n        return unmarshall(token) as IToken;\n    }\n\n    async delete(guid): Promise<Boolean> {\n        const query = {\n            TableName: this.tableName,\n            Key: marshall({ csrfState: guid }),\n        };\n        console.log('deleteQuery>', query);\n        const {\n            $metadata: { httpStatusCode },\n        } = await this.docClient.send(new DeleteItemCommand(query));\n        return httpStatusCode === 200;\n    }\n}\n"]}