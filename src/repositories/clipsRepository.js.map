{"version":3,"file":"clipsRepository.js","sourceRoot":"","sources":["clipsRepository.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    PutItemCommand,\n    GetItemCommand,\n    DeleteItemCommand,\n    QueryCommand,\n} from '@aws-sdk/client-dynamodb';\nimport { marshall, unmarshall } from '@aws-sdk/util-dynamodb';\nimport { Repository, Comparator } from '.';\nimport { DEFAULT_LIMIT, NODE_ENV } from '../constants';\nimport { IClip, ICustomDateFilter } from '../interfaces';\nimport { preMarshallClip } from '../utils/clipEntityUtils';\nimport { DateExpressionMapper, getSk } from '../utils/dynamoUtils';\nimport { logIt } from '../utils/logItUtils';\nimport moment from 'moment';\n\nexport class ClipsRepository extends Repository {\n    public static gsi = 'pk-ratedAtDate-index';\n\n    constructor() {\n        super();\n        this.tableName = `${NODE_ENV}-clips`;\n    }\n\n    async create(createObject: IClip): Promise<Boolean> {\n        const preMarshalledClip = preMarshallClip(createObject, {\n            isAddCreatedAt: true,\n        });\n        const query = {\n            TableName: this.tableName,\n            Item: marshall(preMarshalledClip),\n        };\n        console.log('createQuery>', query);\n        const { $metadata } = await this.docClient\n            .send(new PutItemCommand(query))\n            .catch(logIt);\n        return $metadata.httpStatusCode === 200;\n    }\n\n    async put(putObject: IClip): Promise<Boolean> {\n        const preMarshalledClip = preMarshallClip(putObject, {\n            isAddUpdatedAt: true,\n        });\n        const query = {\n            TableName: this.tableName,\n            Item: marshall(preMarshalledClip),\n        };\n        console.log('putQuery>', query);\n        const { $metadata } = await this.docClient\n            .send(new PutItemCommand(query))\n            .catch(logIt);\n        return $metadata.httpStatusCode === 200;\n    }\n\n    async delete(gameName, guid): Promise<Boolean> {\n        const query = {\n            TableName: this.tableName,\n            Key: marshall({ pk: gameName, sk: getSk(gameName, guid) }),\n        };\n        console.log('deleteQuery>', query);\n        const { $metadata } = await this.docClient.send(\n            new DeleteItemCommand(query)\n        );\n        return $metadata.httpStatusCode === 200;\n    }\n\n    async get(gameName, guid): Promise<IClip | null> {\n        const query = {\n            TableName: this.tableName,\n            Key: marshall({ pk: gameName, sk: getSk(gameName, guid) }),\n        };\n        console.log('getQuery>', query);\n        const { Item } = await this.docClient\n            .send(new GetItemCommand(query))\n            .catch(logIt);\n        if (!Item) {\n            console.log('No records returned for', getSk(gameName, guid));\n            return null;\n        }\n        return unmarshall(Item) as IClip;\n    }\n\n    /**\n     * much deeper abstraction here however I think it will be much easier to implement in the\n     * other repos and it is robust enough to cover all of the short term needs i foresaw.\n     *\n     * @param gameName\n     * @param filter YOU CAN ONLY CHOSE 1 HERE\n     * @param comparator\n     * @param minimumRating\n     * @param includeUsedInVideo\n     * @param includeUsedInShort\n     */\n    async getByCustomDate(\n        gameName: string,\n        filter: ICustomDateFilter,\n        comparator: Comparator, //todo this and filter can be combined in an obj, and rating can have its own comparator too\n        minimumRating: number = 7,\n        includeUsedInVideo: boolean = false,\n        includeUsedInShort: boolean = false,\n    ) {\n        const {\n            FilterExpression,\n            ExpressionAttributeNames,\n            ExpressionAttributeValues,\n            KeyConditionExpression,\n        } = DateExpressionMapper(\n            gameName,\n            filter,\n            comparator,\n            minimumRating,\n            includeUsedInVideo,\n            includeUsedInShort\n        );\n        const query = {\n            TableName: this.tableName,\n            ScanIndexForward: true,\n            KeyConditionExpression,\n            FilterExpression,\n            ExpressionAttributeNames,\n            ExpressionAttributeValues,\n            Limit: DEFAULT_LIMIT,\n        };\n        console.log('getByCustomDateQuery>', query);\n        const { Items } = await this.docClient\n            .send(new QueryCommand(query))\n            .catch(logIt);\n        return unmarshall(Items);\n    }\n\n    async getByFolder(folder: string, gameName: string): Promise<IClip[]> {\n        const query = {\n            TableName: this.tableName,\n            ScanIndexForward: true,\n            Limit: DEFAULT_LIMIT,\n            KeyConditionExpression: 'pk = :pk',\n            FilterExpression: `begins_with(s3Path, :folder)`,\n            ExpressionAttributeValues: marshall({\n                ':pk': gameName,\n                ':folder': folder,\n            }),\n        };\n        console.log('getByFolderQuery>', query);\n        const { Items } = await this.docClient\n            .send(new QueryCommand(query))\n            .catch(logIt);\n        return Items.map(unmarshall);\n    }\n\n    async getUsedInShort(gameName: string): Promise<IClip[]> {\n        const query = {\n            TableName: this.tableName,\n            ScanIndexForward: true,\n            Limit: DEFAULT_LIMIT,\n            KeyConditionExpression: 'pk = :pk',\n            FilterExpression: `attribute_exists(usedInShortAtDate)`,\n            ExpressionAttributeValues: marshall({\n                ':pk': gameName,\n            }),\n        };\n        console.log('getUsedInShortQuery>', query);\n        const { Items } = await this.docClient.send(new QueryCommand(query));\n        return Items.map(unmarshall);\n    }\n\n    async getPreProcessShortsByDate(\n        gameName: string,\n        date: string = moment()\n            .tz('America/New_York')\n            .subtract(1, 'week')\n            .format('YYYY-MM-DD HH:mm:ss.SSS')\n    ): Promise<IClip[]> {\n        const query = {\n            TableName: this.tableName,\n            IndexName: ClipsRepository.gsi,\n            ScanIndexForward: true,\n            KeyConditionExpression: 'pk = :pk and ratedAt >= :ratedAtDate',\n            FilterExpression: 'contains(tags, :tags)',\n            ExpressionAttributeValues: marshall({\n                ':pk': gameName,\n                ':tags': 'short',\n                ':ratedAtDate': date,\n            }),\n        };\n        console.log('getPreProcessShortsByDate>', query);\n        const { Items } = await this.docClient.send(new QueryCommand(query));\n        return Items.map(unmarshall);\n    }\n\n    async getByS3Path(gameName: string, s3Path: string): Promise<IClip> {\n        return this.getByEquality(gameName, { s3Path }, true);\n    }\n}\n"]}