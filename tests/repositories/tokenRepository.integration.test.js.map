{"version":3,"file":"tokenRepository.integration.test.js","sourceRoot":"","sources":["tokenRepository.integration.test.ts"],"names":[],"mappings":";;AAAA,uCAAyC;AAEzC,MAAM,QAAQ,GAAG,EAAE,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;AACpC,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,aAAa,CAAC;AAErC,QAAQ,CAAC,KAAK,IAAI,EAAE;IAChB,OAAO,CAAC,GAAG,GAAG,EAAE,GAAG,QAAQ,EAAE,CAAC;AAClC,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;IACxB,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACpB,IAAI,CAAC,wBAAwB,EAAE,KAAK,IAAI,EAAE;YACtC,MAAM,GAAG,GAAG,MAAM,kBAAU,CAAC,GAAG,CAAC;gBAC7B,SAAS,EAAE,eAAe;gBAC1B,WAAW,EAAE,WAAW;gBACxB,YAAY,EAAE,OAAO;gBACrB,cAAc,EAAE,IAAI;gBACpB,MAAM,EAAE,QAAQ;aACnB,CAAC,CAAC;YACH,MAAM,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,CAAC;QAC7B,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,KAAK,EAAE,GAAG,EAAE;QACjB,IAAI,CAAC,qBAAqB,EAAE,KAAK,IAAI,EAAE;YACnC,MAAM,GAAG,GAAG,MAAM,kBAAU,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;YAClD,MAAM,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,CAAC;QAC7B,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACpB,IAAI,CAAC,wBAAwB,EAAE,KAAK,IAAI,EAAE;YACtC,MAAM,GAAG,GAAG,MAAM,kBAAU,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;YACrD,MAAM,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,CAAC;QAC7B,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import { tokensRepo } from '../../index';\n\nconst ORIG_ENV = { ...process.env };\nprocess.env.NODE_ENV = 'development';\n\nafterAll(async () => {\n    process.env = { ...ORIG_ENV };\n});\n\ndescribe('tokensRepo', () => {\n    describe('create', () => {\n        test('create token is truthy', async () => {\n            const res = await tokensRepo.put({\n                csrfState: 'teststateguid',\n                accessToken: 'testToken',\n                refreshToken: 'today',\n                expirationDate: 'tt',\n                source: 'thetok',\n            });\n            expect(res).toBeTruthy();\n        });\n    });\n\n    describe('get', () => {\n        test('get token is truthy', async () => {\n            const res = await tokensRepo.get('teststateguid');\n            expect(res).toBeTruthy();\n        });\n    });\n\n    describe('delete', () => {\n        test('delete token is truthy', async () => {\n            const res = await tokensRepo.delete('teststateguid');\n            expect(res).toBeTruthy();\n        });\n    });\n});\n"]}