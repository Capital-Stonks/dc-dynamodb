{"version":3,"file":"clipsDataStoreUtils.integration.test.js","sourceRoot":"","sources":["clipsDataStoreUtils.integration.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { IClip } from '../../src/interfaces';\nimport * as clipsDataStore from '../../src/utils/clipsDataStoreUtils';\nimport { v4 } from 'uuid';\nimport moment from 'moment';\nimport { clipsRepo } from '../../index';\nimport * as s3Util from '../../src/utils/s3Utils';\nimport { getDateNow } from '../../src/utils/dynamoUtils';\n\nconst MOCK_FILE_PATH = `${__dirname}/../mocks/mock.mp4`;\n\njest.setTimeout(100000000);\n\ndescribe('clipsDataStoreUtils', () => {\n    describe('createClip', () => {\n        const guid = v4();\n        const s3Path = 'integration-test/valorant/create.mp4';\n\n        afterAll(async () => {\n            await clipsRepo.delete('valorant', guid);\n            await s3Util.deleteObject(s3Path);\n        });\n\n        test('creates a clip and uploads file to s3 & returns IClip interface', async () => {\n            const clip: IClip = {\n                gameName: 'valorant',\n                guid,\n                s3Path,\n                username: 'integration-test',\n                source: 'jest',\n                sourceTitle: 'Mock Entity',\n                sourceDescription: 'Mock Description',\n                rating: 7,\n                ratedAtDate: getDateNow(),\n                usedInVideoAtDate: getDateNow(),\n                usedInShortAtDate: getDateNow(),\n                aggregatedAtDate: getDateNow(),\n                tags: ['flick', 'ace'],\n                duration: 100,\n                resolutionHeight: 720,\n            } as unknown as IClip;\n            const response = await clipsDataStore.createClip(\n                clip,\n                MOCK_FILE_PATH\n            );\n            expect(response.guid).toBe(clip.guid);\n\n            const createdClip = (await clipsRepo.get('valorant', guid)) as any;\n\n            expect(createdClip.pk).toBe(clip.gameName);\n            expect(createdClip.s3Path).toBe(clip.s3Path);\n            expect(createdClip.tags).toStrictEqual(['flick', 'ace']);\n\n            const s3Object = await s3Util.getObject(s3Path);\n\n            expect(s3Object && s3Object.ETag).toBeTruthy();\n        });\n    });\n\n    describe('updateClip', () => {\n        const clip = {\n            gameName: 'valorant',\n            guid: v4(),\n            s3Path: 'folder/valorant/update-me',\n            username: 'integration-test',\n            source: 'jest',\n            sourceTitle: 'Mock Entity',\n            sourceDescription: 'Mock Description',\n            rating: 7,\n            ratedAtDate: getDateNow(),\n            usedInVideoAtDate: getDateNow(),\n            usedInShortAtDate: getDateNow(),\n            aggregatedAtDate: getDateNow(),\n            tags: ['flick', 'ace'],\n            duration: 100,\n            resolutionHeight: 720,\n        } as unknown as IClip;\n\n        beforeAll(async () => {\n            await clipsDataStore.createClip(clip, MOCK_FILE_PATH);\n        });\n\n        afterAll(async () => {\n            await clipsRepo.delete('valorant', clip.guid);\n            await s3Util.deleteObject('folder/valorant/ive-been-updated');\n        });\n\n        test('updates dynamo entity and uploads a new file to s3 and deletes old s3 file', async () => {\n            const update = {\n                ...clip,\n                s3Path: 'folder/valorant/ive-been-updated',\n                rating: 9,\n            };\n\n            const updatedClip = await clipsDataStore.updateClip(\n                update,\n                MOCK_FILE_PATH,\n                clip.s3Path\n            );\n\n            expect(updatedClip.guid).toBe(clip.guid);\n\n            const fetchedUpdatedClip = (await clipsRepo.get(\n                'valorant',\n                clip.guid\n            )) as any;\n\n            expect(fetchedUpdatedClip.rating).toBe(update.rating);\n            expect(fetchedUpdatedClip.s3Path).toBe(update.s3Path);\n\n            const s3Object = await s3Util.getObject(update.s3Path);\n\n            expect(s3Object).toBeTruthy();\n\n            const deletedS3Object = await s3Util.getObject(clip.s3Path);\n\n            expect(deletedS3Object).toBe(null);\n        });\n    });\n\n    describe('moveClip', () => {\n        const clip = {\n            gameName: 'valorant',\n            guid: v4(),\n            s3Path: 'folder/valorant/move-me!',\n            username: 'integration-test',\n            source: 'jest',\n            sourceTitle: 'Mock Entity',\n            sourceDescription: 'Mock Description',\n            rating: 7,\n            ratedAtDate: getDateNow(),\n            usedInVideoAtDate: getDateNow(),\n            usedInShortAtDate: getDateNow(),\n            aggregatedAtDate: getDateNow(),\n            tags: ['flick', 'ace'],\n            duration: 100,\n            resolutionHeight: 720,\n        } as unknown as IClip;\n\n        beforeAll(async () => {\n            await clipsDataStore.createClip(clip, MOCK_FILE_PATH);\n        });\n\n        afterAll(async () => {\n            await clipsRepo.delete('valorant', clip.guid);\n            await s3Util.deleteObject('new-folder/valorant/move-me!');\n        });\n\n        test('moves s3 objects and updates dynamo entry', async () => {\n            const movedClip = await clipsDataStore.moveClip(clip, 'new-folder');\n            console.log(movedClip);\n\n            expect(movedClip.s3Path).toBe('new-folder/valorant/move-me!');\n\n            const s3Object = await s3Util.getObject(movedClip.s3Path);\n            console.log(s3Object);\n\n            expect(s3Object).toBeTruthy();\n\n            const deletedS3Object = await s3Util.getObject(clip.s3Path);\n\n            expect(deletedS3Object).toBe(null);\n\n            const fetchedUpdatedClip = (await clipsRepo.get(\n                'valorant',\n                clip.guid\n            )) as any;\n\n            expect(fetchedUpdatedClip.s3Path).toBe(\n                'new-folder/valorant/move-me!'\n            );\n        });\n    });\n\n    describe('deleteClip', () => {\n        const clip = {\n            gameName: 'valorant',\n            guid: v4(),\n            s3Path: 'folder/valorant/delete-me',\n            username: 'integration-test',\n            source: 'jest',\n            sourceTitle: 'Mock Entity',\n            sourceDescription: 'Mock Description',\n            rating: 7,\n            ratedAtDate: getDateNow(),\n            usedInVideoAtDate: getDateNow(),\n            usedInShortAtDate: getDateNow(),\n            aggregatedAtDate: getDateNow(),\n            tags: ['flick', 'ace'],\n            duration: 100,\n            resolutionHeight: 720,\n        } as unknown as IClip;\n\n        beforeAll(async () => {\n            await clipsDataStore.createClip(clip, MOCK_FILE_PATH);\n        });\n\n        test('deletes dynamo entity and s3 object', async () => {\n            await clipsDataStore.deleteClip(clip);\n\n            const deletedS3Object = await s3Util.getObject(clip.s3Path);\n            expect(deletedS3Object).toBe(null);\n\n            const fetchedUpdatedClip = (await clipsRepo.get(\n                'valorant',\n                clip.guid\n            )) as any;\n            expect(fetchedUpdatedClip).toBe(null);\n        });\n    });\n});\n"]}