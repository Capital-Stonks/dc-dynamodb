{"version":3,"file":"migrateTables.js","sourceRoot":"","sources":["../migrateTables.ts"],"names":[],"mappings":";;AAAA,+CAAkD;AAClD,wEAAqE;AACrE,sEAAmE;AACnE,yCAAiE;AACjE,qCAAoC;AAEpC,2EAA2E;AAC3E,MAAM,WAAW,GAAG,2BAAe,CAAC;AACpC,MAAM,SAAS,GAAG,IAAI,iCAAe,CAAC;IAClC,MAAM,EAAE,WAAW;IACnB,OAAO,EAAE,WAAW;CACvB,CAAC,CAAC;AAEH,MAAM,EAAE,GAAG,SAAS,CAAC,MAAM,CAAC;AAE5B,MAAM,QAAQ,GAAG,IAAI,+BAAc,CAAC;IAChC,MAAM,EAAE,WAAW;IACnB,OAAO,EAAE,WAAW;CACvB,CAAC,CAAC;AACH,MAAM,aAAa,GAAG,IAAI,CAAC;AAC3B,wDAAwD;AACxD,MAAM,aAAa,GAAG,KAAK,CAAC;AAC5B,MAAM,kCAAkC,GAAG,KAAK,CAAC;AACjD,CAAC,KAAK,IAAI,EAAE;IACR,IAAI,aAAa,IAAI,kCAAkC,EAAE;QACrD,MAAM,GAAG,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC;YACjC,EAAE,CAAC,WAAW,CAAC,EAAE,SAAS,EAAE,SAAS,CAAC,SAAS,EAAE,CAAC;YAClD,EAAE,CAAC,WAAW,CAAC,EAAE,SAAS,EAAE,QAAQ,CAAC,SAAS,EAAE,CAAC;SACpD,CAAC,CAAC;QACH,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;KACpB;IACD,IAAI,aAAa,EAAE;QACf,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC;YACpC,EAAE,CAAC,WAAW,CAAC,IAAA,yBAAgB,EAAC,WAAW,CAAC,CAAC;YAC7C,EAAE,CAAC,WAAW,CAAC,IAAA,wBAAe,EAAC,WAAW,CAAC,CAAC;SAC/C,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE;YACX,IAAI,CAAC,EAAE;gBACH,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;aAClC;QACL,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;KACvB;IAED,MAAM,GAAG,GAAG,MAAM,QAAQ,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,aAAM,EAAE,CAAC,CAAC;IAC/D,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACrB,CAAC,CAAC,EAAE,CAAC","sourcesContent":["import { DYNAMO_ENV_NAME } from './src/constants';\r\nimport { ClipsRepository } from './src/repositories/clipsRepository';\r\nimport { TagsRepository } from './src/repositories/tagsRepository';\r\nimport { clipsTableSchema, tagsTableSchema } from './src/schema';\r\nimport { tagMap } from './src/tags';\r\n\r\n// this file is just to run a one time migration to get the tables into aws\r\nconst environment = DYNAMO_ENV_NAME;\r\nconst clipsRepo = new ClipsRepository({\r\n    region: 'us-east-2',\r\n    envName: environment,\r\n});\r\n\r\nconst db = clipsRepo.client;\r\n\r\nconst tagsRepo = new TagsRepository({\r\n    region: 'us-east-2',\r\n    envName: environment,\r\n});\r\nconst CREATE_TABLES = true;\r\n// dont set to true unless you want to delete the tables\r\nconst DELETE_TABLES = false;\r\nconst YOU_SURE_YOU_WANT_TO_DELETE_TABLES = false;\r\n(async () => {\r\n    if (DELETE_TABLES && YOU_SURE_YOU_WANT_TO_DELETE_TABLES) {\r\n        const del = await Promise.allSettled([\r\n            db.deleteTable({ TableName: clipsRepo.tableName }),\r\n            db.deleteTable({ TableName: tagsRepo.tableName }),\r\n        ]);\r\n        console.log(del);\r\n    }\r\n    if (CREATE_TABLES) {\r\n        const create = await Promise.allSettled([\r\n            db.createTable(clipsTableSchema(environment)),\r\n            db.createTable(tagsTableSchema(environment)),\r\n        ]).catch((e) => {\r\n            if (e) {\r\n                console.log(JSON.stringify(e));\r\n            }\r\n        });\r\n        console.log(create);\r\n    }\r\n\r\n    const put = await tagsRepo.put({ pk: 'GLOBAL', tags: tagMap });\r\n    console.log(put);\r\n})();\r\n"]}