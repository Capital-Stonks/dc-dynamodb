{"version":3,"file":"dynamoUtils.js","sourceRoot":"","sources":["../../../src/utils/dynamoUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import { SK_SEPARATOR } from '../../constants';\nimport momentTz from 'moment-timezone';\nimport { IColumnNameMap, ICustomDateFilter } from '../interfaces';\nimport { marshall } from '@aws-sdk/util-dynamodb';\n\nconst moment = momentTz;\n\nexport const preMarshallPrep = (obj) => {\n    return Object.fromEntries(\n        Object.entries(obj).filter(([_, v]) => v !== undefined)\n    );\n};\n\nexport const getSk = (gameName, guid) => `${gameName}${SK_SEPARATOR}${guid}`;\n\nexport const dateEst = () =>\n    moment().tz('America/New_York').format('YYYY-MM-DD HH:mm:ss.SSS');\n\nexport const columnNameKeyValueMaps: { [key: string]: IColumnNameMap } =\n    Object.freeze({\n        ratedAtDate: {\n            Name: `ratedAtDate`,\n            Key: '#ratedAtDate',\n            Value: ':ratedAtDate',\n        },\n        usedInVideoAtDate: {\n            Name: 'usedInVideoAtDate',\n            Key: '#usedInVideoAtDate',\n            Value: ':usedInVideoAtDate',\n        },\n        aggregatedAtDate: {\n            Name: 'aggregatedAtDate',\n            Key: '#aggregatedAtDate',\n            Value: ':aggregatedAtDate',\n        },\n        usedInShortAtDate: {\n            Name: 'usedInShortAtDate',\n            Key: '#usedInShortAtDate',\n            Value: ':usedInShortAtDate',\n        },\n        minimumRating: {\n            Name: 'rating',\n            Key: '#rating',\n            Value: ':rating',\n        },\n    });\n\nexport const getFilterExpression = (\n    filter: ICustomDateFilter,\n    expression,\n    minimumRating,\n    includeUsedInVideo,\n    includeUsedInShort\n) => {\n    const columnName = Object.keys(filter)?.[0];\n    const map = columnNameKeyValueMaps[columnName];\n    const ratingMap = columnNameKeyValueMaps['minimumRating'];\n    let filterExpression = `${map.Key} ${expression} ${map.Value} `;\n\n    if (minimumRating) {\n        filterExpression += `AND ${ratingMap.Key} >= ${ratingMap.Value} `;\n    }\n    if (!includeUsedInVideo) {\n        filterExpression += 'AND attribute_not_exists(usedInVideoAtDate) ';\n    }\n    if (!includeUsedInShort) {\n        filterExpression += 'AND attribute_not_exists(usedInShortAtDate) ';\n    }\n\n    return filterExpression;\n};\n\nexport const getExpressionAttributeNames = (filter: ICustomDateFilter) => {\n    const columnName = Object.keys(filter)?.[0];\n    const map = columnNameKeyValueMaps[columnName];\n    const ratingMap = columnNameKeyValueMaps['minimumRating'];\n    // todo on hold until gsi is fully solved\n    // let ExpressionAttributeNames;\n    // if (!map.Name === ClipsRepository.gsi){\n    //     KeyConditionExpression += ` AND ${map.Name} ${expression} ${map.Value}`;\n    // }\n    return {\n        '#pk': 'pk',\n        [map.Key]: map.Name,\n        [ratingMap.Key]: ratingMap.Name,\n    };\n};\n\nexport const getExpressionAttributeValues = (\n    gameName,\n    filter: ICustomDateFilter,\n    minimumRating\n) => {\n    const columnName = Object.keys(filter)?.[0];\n    const map = columnNameKeyValueMaps[columnName];\n    const ratingMap = columnNameKeyValueMaps['minimumRating'];\n    return {\n        ':pk': gameName,\n        [map.Value]: filter[columnName],\n        [ratingMap.Value]: minimumRating,\n    };\n};\n\nexport const getKeyConditionExpression = (gameName, filter, expression) => {\n    // todo on hold until gsi is fully solved\n    // const columnName = Object.keys(filter)?.[0];\n    // const map = columnNameKeyValueMaps[columnName];\n    // let KeyConditionExpression = `#pk = :pk AND begins_with(sk, ${gameName})`;\n    // if (map.Name === ClipsRepository.gsi){\n    //     KeyConditionExpression += ` AND ${map.Key} ${expression} ${map.Value}`;\n    // }\n\n    //let KeyConditionExpression = `#pk = 'GLOBAL' OR #pk = 'GENRE' AND sk = 'GENRE#SHOOTER' or AND begins_with(sk, ${gameName})`;\n    return '#pk = :pk';\n};\n\nexport const DateExpressionMapper = (\n    gameName,\n    filter: ICustomDateFilter,\n    expression,\n    minimumRating,\n    usedInVideo,\n    usedInShort\n) => ({\n    FilterExpression: getFilterExpression(\n        filter,\n        expression,\n        minimumRating,\n        usedInVideo,\n        usedInShort\n    ),\n    ExpressionAttributeNames: getExpressionAttributeNames(filter),\n    ExpressionAttributeValues: marshall(\n        getExpressionAttributeValues(gameName, filter, minimumRating)\n    ),\n    KeyConditionExpression: getKeyConditionExpression(\n        gameName,\n        filter,\n        expression\n    ),\n});\n"]}