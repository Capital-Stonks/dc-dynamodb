{"version":3,"file":"clipsDataStoreUtils.js","sourceRoot":"","sources":["../../../src/utils/clipsDataStoreUtils.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA,qEAAkE;AAClE,kDAAoC;AACpC,2DAA6C;AAE7C,MAAM,QAAQ,GAAG,IAAI,iCAAe,EAAE,CAAC;AAEhC,MAAM,UAAU,GAAG,KAAK,EAC3B,IAAW,EACX,QAAgB,EACF,EAAE;IAChB,MAAM,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC5B,OAAO,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC;AAC5E,CAAC,CAAC;AANW,QAAA,UAAU,cAMrB;AAEK,MAAM,UAAU,GAAG,KAAK,EAC3B,IAAW,EACX,QAAgB,EAChB,SAAiB,EACH,EAAE;IAChB,MAAM,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACzB,MAAM,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IACtD,OAAO,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC;AAC3D,CAAC,CAAC;AARW,QAAA,UAAU,cAQrB;AAEK,MAAM,QAAQ,GAAG,KAAK,EACzB,IAAW,EACX,QAAgB,EAChB,eAA8B,IAAI,EACpB,EAAE;IAChB,IAAI,SAAS,GAAG,WAAW,CAAC,kBAAkB,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACtE,IAAI,YAAY,EAAE;QACd,SAAS,GAAG,WAAW,CAAC,eAAe,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;KACpE;IACD,MAAM,OAAO,GAAG;QACZ,GAAG,IAAI;QACP,MAAM,EAAE,SAAS;KACpB,CAAC;IACF,MAAM,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IAC5B,OAAO,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC;AACzE,CAAC,CAAC;AAfW,QAAA,QAAQ,YAenB;AAEK,MAAM,UAAU,GAAG,KAAK,EAAE,IAAW,EAAE,EAAE;IAC5C,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1C,OAAO,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC5C,CAAC,CAAC;AAHW,QAAA,UAAU,cAGrB","sourcesContent":["import { IClip } from '../interfaces';\r\nimport { ClipsRepository } from '../repositories/clipsRepository';\r\nimport * as s3Util from './s3Utils';\r\nimport * as s3PathUtils from './s3PathUtils';\r\n\r\nconst clipRepo = new ClipsRepository();\r\n\r\nexport const createClip = async (\r\n    clip: IClip,\r\n    filePath: string\r\n): Promise<IClip> => {\r\n    await clipRepo.create(clip);\r\n    return s3Util.putObjectFromFile(clip.s3Path, filePath).then(() => clip);\r\n};\r\n\r\nexport const updateClip = async (\r\n    clip: IClip,\r\n    filePath: string,\r\n    oldS3Path: string\r\n): Promise<IClip> => {\r\n    await clipRepo.put(clip);\r\n    await s3Util.putObjectFromFile(clip.s3Path, filePath);\r\n    return s3Util.deleteObject(oldS3Path).then(() => clip);\r\n};\r\n\r\nexport const moveClip = async (\r\n    clip: IClip,\r\n    toFolder: string,\r\n    parentFolder: string | null = null\r\n): Promise<IClip> => {\r\n    let newS3Path = s3PathUtils.updateS3PathFolder(toFolder, clip.s3Path);\r\n    if (parentFolder) {\r\n        newS3Path = s3PathUtils.addParentFolder(parentFolder, newS3Path);\r\n    }\r\n    const newClip = {\r\n        ...clip,\r\n        s3Path: newS3Path,\r\n    };\r\n    await clipRepo.put(newClip);\r\n    return s3Util.moveObject(clip.s3Path, newS3Path).then(() => newClip);\r\n};\r\n\r\nexport const deleteClip = async (clip: IClip) => {\r\n    clipRepo.delete(clip.gameName, clip.guid);\r\n    return s3Util.deleteObject(clip.s3Path);\r\n};\r\n"]}