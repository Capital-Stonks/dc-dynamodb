{"version":3,"file":"tagsRepository.js","sourceRoot":"","sources":["../../../src/repositories/tagsRepository.ts"],"names":[],"mappings":";;;AAAA,8DAA0E;AAC1E,0DAA8D;AAC9D,8CAAmE;AACnE,wBAA+B;AAC/B,4CAA+C;AAE/C,MAAa,cAAe,SAAQ,aAAU;IAC1C,YAAY,EAAE,MAAM,GAAG,WAAW,EAAE,OAAO,GAAG,2BAAe,EAAE;QAC3D,KAAK,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,oBAAO,CAAC,GAAG,EAAE,CAAC,CAAC;QACxC,IAAI,CAAC,SAAS,GAAG,GAAG,OAAO,OAAO,CAAC;IACvC,CAAC;IAED,KAAK,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,IAAI,EAAY;QAC5B,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,SAAS;aAC3B,IAAI,CACD,IAAI,gCAAc,CAAC;YACf,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,IAAI,EAAE,IAAA,wBAAQ,EAAC,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC;SAC/B,CAAC,CACL;aACA,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE;YACT,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACf,OAAO,CAAC,CAAC;QACb,CAAC,CAAC,CAAC;QACP,OAAO,GAAG,EAAE,SAAS,CAAC,cAAc,KAAK,GAAG,CAAC;IACjD,CAAC;IAED,KAAK,CAAC,GAAG;QACL,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,CAAC,SAAS;aAChC,IAAI,CACD,IAAI,gCAAc,CAAC;YACf,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,GAAG,EAAE,IAAA,wBAAQ,EAAC;gBACV,EAAE,EAAE,QAAQ;aACf,CAAC;SACL,CAAC,CACL;aACA,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE;YACT,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACf,OAAO,CAAC,CAAC;QACb,CAAC,CAAC,CAAC;QACP,OAAO,IAAA,0BAAU,EAAC,IAAI,CAAU,CAAC;IACrC,CAAC;CACJ;AArCD,wCAqCC","sourcesContent":["import { PutItemCommand, GetItemCommand } from '@aws-sdk/client-dynamodb';\nimport { marshall, unmarshall } from '@aws-sdk/util-dynamodb';\nimport { EnvName, IGetTags, IPutTags, ITags } from '../interfaces';\nimport { Repository } from '.';\nimport { DYNAMO_ENV_NAME } from '../constants';\n\nexport class TagsRepository extends Repository {\n    constructor({ region = 'us-east-2', envName = DYNAMO_ENV_NAME }) {\n        super({ region, envName: EnvName.DEV });\n        this.tableName = `${envName}-tags`;\n    }\n\n    async put({ pk, tags }: IPutTags) {\n        const res = await this.docClient\n            .send(\n                new PutItemCommand({\n                    TableName: this.tableName,\n                    Item: marshall({ pk, tags }),\n                })\n            )\n            .catch((e) => {\n                console.log(e);\n                return e;\n            });\n        return res?.$metadata.httpStatusCode === 200;\n    }\n\n    async get(): Promise<ITags> {\n        const { Item } = await this.docClient\n            .send(\n                new GetItemCommand({\n                    TableName: this.tableName,\n                    Key: marshall({\n                        pk: 'GLOBAL',\n                    }),\n                })\n            )\n            .catch((e) => {\n                console.log(e);\n                return e;\n            });\n        return unmarshall(Item) as ITags;\n    }\n}\n"]}