{"version":3,"file":"clipsRepository.js","sourceRoot":"","sources":["../../../src/repositories/clipsRepository.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    PutItemCommand,\n    GetItemCommand,\n    DeleteItemCommand,\n    QueryCommand,\n} from '@aws-sdk/client-dynamodb';\nimport { marshall, unmarshall } from '@aws-sdk/util-dynamodb';\nimport { Repository, Comparator } from '.';\nimport { DYNAMO_ENV_NAME } from '../constants';\nimport { EnvName, IClip, ICustomDateFilter } from '../interfaces';\nimport {\n    dateEst,\n    DateExpressionMapper,\n    getSk,\n    preMarshallPrep,\n} from '../utils/dynamoUtils';\n\nexport class ClipsRepository extends Repository {\n    public tableName;\n    public static gsi = 'ratedAtDate-index';\n\n    constructor({ region = 'us-east-2', envName = DYNAMO_ENV_NAME }) {\n        super({ region, envName: EnvName.DEV });\n        this.tableName = `${envName}-clips`;\n    }\n\n    async create(createObject: IClip) {\n        const {\n            gameName,\n            s3Path,\n            guid,\n            username,\n            source,\n            sourceTitle,\n            sourceDescription,\n            tags,\n            duration,\n            resolutionHeight,\n            rating,\n            ratedAtDate,\n            usedInVideoAtDate,\n            usedInShortAtDate,\n            aggregatedAtDate,\n        } = createObject;\n        const filteredPut = preMarshallPrep({\n            pk: gameName,\n            sk: getSk(gameName, guid),\n            s3Path,\n            guid,\n            aggregatedAtDate,\n            username,\n            source,\n            sourceTitle,\n            sourceDescription,\n            tags,\n            duration,\n            resolutionHeight,\n            rating,\n            ratedAtDate,\n            usedInVideoAtDate,\n            usedInShortAtDate,\n            createdAt: dateEst(),\n        });\n\n        const { $metadata } = await this.docClient\n            .send(\n                new PutItemCommand({\n                    TableName: this.tableName,\n                    Item: marshall(filteredPut),\n                })\n            )\n            .catch((e) => {\n                console.log(e);\n                return e;\n            });\n        return $metadata.httpStatusCode === 200;\n    }\n\n    async put(putObject: IClip) {\n        const {\n            gameName,\n            guid,\n            username,\n            s3Path,\n            source,\n            sourceTitle,\n            sourceDescription,\n            tags,\n            duration,\n            resolutionHeight,\n            rating,\n            ratedAtDate,\n            usedInVideoAtDate,\n            usedInShortAtDate,\n            aggregatedAtDate,\n        } = putObject;\n        const filteredPut = preMarshallPrep({\n            pk: gameName,\n            sk: getSk(gameName, guid),\n            guid,\n            s3Path,\n            username,\n            source,\n            sourceTitle,\n            sourceDescription,\n            rating,\n            tags,\n            duration,\n            resolutionHeight,\n            aggregatedAtDate,\n            ratedAtDate,\n            usedInVideoAtDate,\n            usedInShortAtDate,\n            updatedAt: dateEst(),\n        });\n\n        const { $metadata } = await this.docClient\n            .send(\n                new PutItemCommand({\n                    TableName: this.tableName,\n                    Item: marshall(filteredPut),\n                })\n            )\n            .catch((e) => {\n                console.log(e);\n                return e;\n            });\n        return $metadata.httpStatusCode === 200;\n    }\n\n    async delete(gameName, guid) {\n        const { $metadata } = await this.docClient.send(\n            new DeleteItemCommand({\n                TableName: this.tableName,\n                Key: marshall({ pk: gameName, sk: getSk(gameName, guid) }),\n            })\n        );\n        return $metadata.httpStatusCode === 200;\n    }\n\n    async get(gameName, guid) {\n        const { Item } = await this.docClient\n            .send(\n                new GetItemCommand({\n                    TableName: this.tableName,\n                    Key: marshall({ pk: gameName, sk: getSk(gameName, guid) }),\n                })\n            )\n            .catch((e) => {\n                console.log(e);\n                return e;\n            });\n        if (!Item) {\n            console.log('No records returned for', getSk(gameName, guid));\n            return null;\n        }\n        return unmarshall(Item);\n    }\n\n    /**\n     * much deeper abstraction here however I think it will be much easier to implement in the\n     * other repos and it is robust enough to cover all of the short term needs i foresaw.\n     *\n     * @param gameName\n     * @param filter YOU CAN ONLY CHOSE 1 HERE\n     * @param comparator\n     * @param minimumRating\n     * @param includeUsedInVideo\n     * @param includeUsedInShort\n     */\n    async getByCustomDate(\n        gameName: string,\n        filter: ICustomDateFilter,\n        comparator: Comparator, //todo this and filter can be combined in an obj, and rating can have its own comparator too\n        minimumRating: number = 7,\n        includeUsedInVideo: boolean = false,\n        includeUsedInShort: boolean = false\n    ) {\n        const {\n            FilterExpression,\n            ExpressionAttributeNames,\n            ExpressionAttributeValues,\n            KeyConditionExpression,\n        } = DateExpressionMapper(\n            gameName,\n            filter,\n            comparator,\n            minimumRating,\n            includeUsedInVideo,\n            includeUsedInShort\n        );\n        const { Items } = this.docClient\n            .send(\n                new QueryCommand({\n                    TableName: this.tableName,\n                    ScanIndexForward: true,\n                    KeyConditionExpression,\n                    FilterExpression,\n                    ExpressionAttributeNames,\n                    ExpressionAttributeValues,\n                })\n            )\n            .catch((e) => {\n                console.log(e);\n                return e;\n            });\n        return unmarshall(Items);\n    }\n}\n"]}