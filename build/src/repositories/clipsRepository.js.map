{"version":3,"file":"clipsRepository.js","sourceRoot":"","sources":["../../../src/repositories/clipsRepository.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    PutItemCommand,\n    GetItemCommand,\n    DeleteItemCommand,\n    QueryCommand,\n} from '@aws-sdk/client-dynamodb';\nimport { marshall, unmarshall } from '@aws-sdk/util-dynamodb';\nimport { Repository, Comparator } from '.';\nimport { DYNAMO_ENV_NAME } from '../constants';\nimport { IClip, ICustomDateFilter } from '../interfaces';\nimport { preMarshallClip } from '../utils/clipEntityUtils';\nimport { DateExpressionMapper, getSk } from '../utils/dynamoUtils';\nimport { logIt } from '../utils/logItUtils';\n\nexport class ClipsRepository extends Repository {\n    public static gsi = 'ratedAtDate-index';\n\n    constructor(config = { region: 'us-east-2', envName: DYNAMO_ENV_NAME }) {\n        super(config);\n        this.tableName = `${config.envName}-clips`;\n    }\n\n    async create(createObject: IClip): Promise<Boolean> {\n        const preMarshalledClip = preMarshallClip(createObject, {\n            isAddCreatedAt: true,\n        });\n        const { $metadata } = await this.docClient\n            .send(\n                new PutItemCommand({\n                    TableName: this.tableName,\n                    Item: marshall(preMarshalledClip),\n                })\n            )\n            .catch(logIt);\n        return $metadata.httpStatusCode === 200;\n    }\n\n    async put(putObject: IClip): Promise<Boolean> {\n        const preMarshalledClip = preMarshallClip(putObject, {\n            isAddUpdatedAt: true,\n        });\n        const { $metadata } = await this.docClient\n            .send(\n                new PutItemCommand({\n                    TableName: this.tableName,\n                    Item: marshall(preMarshalledClip),\n                })\n            )\n            .catch(logIt);\n        return $metadata.httpStatusCode === 200;\n    }\n\n    async delete(gameName, guid): Promise<Boolean> {\n        const { $metadata } = await this.docClient.send(\n            new DeleteItemCommand({\n                TableName: this.tableName,\n                Key: marshall({ pk: gameName, sk: getSk(gameName, guid) }),\n            })\n        );\n        return $metadata.httpStatusCode === 200;\n    }\n\n    async get(gameName, guid): Promise<IClip | null> {\n        const { Item } = await this.docClient\n            .send(\n                new GetItemCommand({\n                    TableName: this.tableName,\n                    Key: marshall({ pk: gameName, sk: getSk(gameName, guid) }),\n                })\n            )\n            .catch(logIt);\n        if (!Item) {\n            console.log('No records returned for', getSk(gameName, guid));\n            return null;\n        }\n        return unmarshall(Item) as IClip;\n    }\n\n    /**\n     * much deeper abstraction here however I think it will be much easier to implement in the\n     * other repos and it is robust enough to cover all of the short term needs i foresaw.\n     *\n     * @param gameName\n     * @param filter YOU CAN ONLY CHOSE 1 HERE\n     * @param comparator\n     * @param minimumRating\n     * @param includeUsedInVideo\n     * @param includeUsedInShort\n     */\n    async getByCustomDate(\n        gameName: string,\n        filter: ICustomDateFilter,\n        comparator: Comparator, //todo this and filter can be combined in an obj, and rating can have its own comparator too\n        minimumRating: number = 7,\n        includeUsedInVideo: boolean = false,\n        includeUsedInShort: boolean = false\n    ) {\n        const {\n            FilterExpression,\n            ExpressionAttributeNames,\n            ExpressionAttributeValues,\n            KeyConditionExpression,\n        } = DateExpressionMapper(\n            gameName,\n            filter,\n            comparator,\n            minimumRating,\n            includeUsedInVideo,\n            includeUsedInShort\n        );\n        const { Items } = await this.docClient\n            .send(\n                new QueryCommand({\n                    TableName: this.tableName,\n                    ScanIndexForward: true,\n                    KeyConditionExpression,\n                    FilterExpression,\n                    ExpressionAttributeNames,\n                    ExpressionAttributeValues,\n                })\n            )\n            .catch(logIt);\n        return unmarshall(Items);\n    }\n\n    async getByFolder(folder: string, gameName: string): Promise<IClip[]> {\n        const { Items } = await this.docClient\n            .send(\n                new QueryCommand({\n                    TableName: this.tableName,\n                    ScanIndexForward: true,\n                    KeyConditionExpression: 'pk = :pk',\n                    FilterExpression: `contains(s3Path, :folder)`,\n                    ExpressionAttributeValues: marshall({\n                        ':pk': gameName,\n                        ':folder': folder,\n                    }),\n                })\n            )\n            .catch(logIt);\n        return Items.map(unmarshall);\n    }\n\n    async getUsedInShort(gameName: string): Promise<IClip[]> {\n        const { Items } = await this.docClient.send(\n            new QueryCommand({\n                TableName: this.tableName,\n                ScanIndexForward: true,\n                KeyConditionExpression: 'pk = :pk',\n                FilterExpression: `attribute_exists(usedInShortAtDate)`,\n                ExpressionAttributeValues: marshall({\n                    ':pk': gameName,\n                }),\n            })\n        );\n        return Items.map(unmarshall);\n    }\n\n    async getByS3Path(gameName: string, s3Path: string): Promise<IClip> {\n        return this.getByEquality(gameName, { s3Path }, true);\n    }\n}\n"]}