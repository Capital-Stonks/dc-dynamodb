{"version":3,"file":"clipsRepository.js","sourceRoot":"","sources":["../../../src/repositories/clipsRepository.ts"],"names":[],"mappings":";;;AAAA,8DAKkC;AAClC,0DAA8D;AAC9D,wBAA2C;AAC3C,4CAA+C;AAE/C,kDAA6C;AAC7C,sDAI8B;AAC9B,oDAA4C;AAE5C,MAAa,eAAgB,SAAQ,aAAU;IAG3C,YAAY,MAAM,GAAG,EAAE,MAAM,EAAE,WAAW,EAAE,OAAO,EAAE,2BAAe,EAAE;QAClE,KAAK,CAAC,MAAM,CAAC,CAAC;QACd,IAAI,CAAC,SAAS,GAAG,GAAG,MAAM,CAAC,OAAO,QAAQ,CAAC;IAC/C,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,YAAmB;QAC5B,MAAM,EACF,QAAQ,EACR,MAAM,EACN,IAAI,EACJ,QAAQ,EACR,MAAM,EACN,WAAW,EACX,QAAQ,EACR,WAAW,EACX,iBAAiB,EACjB,IAAI,EACJ,QAAQ,EACR,gBAAgB,EAChB,MAAM,EACN,WAAW,EACX,iBAAiB,EACjB,iBAAiB,EACjB,gBAAgB,GACnB,GAAG,YAAY,CAAC;QACjB,MAAM,WAAW,GAAG,IAAA,6BAAe,EAAC;YAChC,EAAE,EAAE,QAAQ;YACZ,EAAE,EAAE,IAAA,mBAAK,EAAC,QAAQ,EAAE,IAAI,CAAC;YACzB,MAAM;YACN,IAAI;YACJ,gBAAgB;YAChB,QAAQ;YACR,MAAM;YACN,WAAW;YACX,QAAQ;YACR,WAAW;YACX,iBAAiB;YACjB,IAAI;YACJ,QAAQ;YACR,gBAAgB;YAChB,MAAM;YACN,WAAW;YACX,iBAAiB;YACjB,iBAAiB;YACjB,SAAS,EAAE,IAAA,mBAAO,GAAE;SACvB,CAAC,CAAC;QAEH,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,IAAI,CAAC,SAAS;aACrC,IAAI,CACD,IAAI,gCAAc,CAAC;YACf,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,IAAI,EAAE,IAAA,wBAAQ,EAAC,WAAW,CAAC;SAC9B,CAAC,CACL;aACA,KAAK,CAAC,kBAAK,CAAC,CAAC;QAClB,OAAO,SAAS,CAAC,cAAc,KAAK,GAAG,CAAC;IAC5C,CAAC;IAED,KAAK,CAAC,GAAG,CAAC,SAAgB;QACtB,MAAM,EACF,QAAQ,EACR,IAAI,EACJ,QAAQ,EACR,MAAM,EACN,MAAM,EACN,WAAW,EACX,QAAQ,EACR,iBAAiB,EACjB,IAAI,EACJ,QAAQ,EACR,gBAAgB,EAChB,MAAM,EACN,WAAW,EACX,iBAAiB,EACjB,iBAAiB,EACjB,gBAAgB,GACnB,GAAG,SAAS,CAAC;QACd,MAAM,WAAW,GAAG,IAAA,6BAAe,EAAC;YAChC,EAAE,EAAE,QAAQ;YACZ,EAAE,EAAE,IAAA,mBAAK,EAAC,QAAQ,EAAE,IAAI,CAAC;YACzB,IAAI;YACJ,MAAM;YACN,QAAQ;YACR,MAAM;YACN,WAAW;YACX,QAAQ;YACR,iBAAiB;YACjB,MAAM;YACN,IAAI;YACJ,QAAQ;YACR,gBAAgB;YAChB,gBAAgB;YAChB,WAAW;YACX,iBAAiB;YACjB,iBAAiB;YACjB,SAAS,EAAE,IAAA,mBAAO,GAAE;SACvB,CAAC,CAAC;QAEH,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,IAAI,CAAC,SAAS;aACrC,IAAI,CACD,IAAI,gCAAc,CAAC;YACf,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,IAAI,EAAE,IAAA,wBAAQ,EAAC,WAAW,CAAC;SAC9B,CAAC,CACL;aACA,KAAK,CAAC,kBAAK,CAAC,CAAC;QAClB,OAAO,SAAS,CAAC,cAAc,KAAK,GAAG,CAAC;IAC5C,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI;QACvB,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CAC3C,IAAI,mCAAiB,CAAC;YAClB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,GAAG,EAAE,IAAA,wBAAQ,EAAC,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAA,mBAAK,EAAC,QAAQ,EAAE,IAAI,CAAC,EAAE,CAAC;SAC7D,CAAC,CACL,CAAC;QACF,OAAO,SAAS,CAAC,cAAc,KAAK,GAAG,CAAC;IAC5C,CAAC;IAED,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI;QACpB,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,CAAC,SAAS;aAChC,IAAI,CACD,IAAI,gCAAc,CAAC;YACf,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,GAAG,EAAE,IAAA,wBAAQ,EAAC,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAA,mBAAK,EAAC,QAAQ,EAAE,IAAI,CAAC,EAAE,CAAC;SAC7D,CAAC,CACL;aACA,KAAK,CAAC,kBAAK,CAAC,CAAC;QAClB,IAAI,CAAC,IAAI,EAAE;YACP,OAAO,CAAC,GAAG,CAAC,yBAAyB,EAAE,IAAA,mBAAK,EAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC;YAC9D,OAAO,IAAI,CAAC;SACf;QACD,OAAO,IAAA,0BAAU,EAAC,IAAI,CAAU,CAAC;IACrC,CAAC;IAED;;;;;;;;;;OAUG;IACH,KAAK,CAAC,eAAe,CACjB,QAAgB,EAChB,MAAyB,EACzB,UAAsB,EAAE,4FAA4F;IACpH,gBAAwB,CAAC,EACzB,qBAA8B,KAAK,EACnC,qBAA8B,KAAK;QAEnC,MAAM,EACF,gBAAgB,EAChB,wBAAwB,EACxB,yBAAyB,EACzB,sBAAsB,GACzB,GAAG,IAAA,kCAAoB,EACpB,QAAQ,EACR,MAAM,EACN,UAAU,EACV,aAAa,EACb,kBAAkB,EAClB,kBAAkB,CACrB,CAAC;QACF,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,CAAC,SAAS;aACjC,IAAI,CACD,IAAI,8BAAY,CAAC;YACb,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,gBAAgB,EAAE,IAAI;YACtB,sBAAsB;YACtB,gBAAgB;YAChB,wBAAwB;YACxB,yBAAyB;SAC5B,CAAC,CACL;aACA,KAAK,CAAC,kBAAK,CAAC,CAAC;QAClB,OAAO,IAAA,0BAAU,EAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,MAAc,EAAE,QAAgB;QAC9C,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,CAAC,SAAS;aACjC,IAAI,CACD,IAAI,8BAAY,CAAC;YACb,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,gBAAgB,EAAE,IAAI;YACtB,sBAAsB,EAAE,UAAU;YAClC,gBAAgB,EAAE,2BAA2B;YAC7C,yBAAyB,EAAE,IAAA,wBAAQ,EAAC;gBAChC,KAAK,EAAE,QAAQ;gBACf,SAAS,EAAE,MAAM;aACpB,CAAC;SACL,CAAC,CACL;aACA,KAAK,CAAC,kBAAK,CAAC,CAAC;QAClB,OAAO,KAAK,CAAC,GAAG,CAAC,0BAAU,CAAC,CAAC;IACjC,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,QAAgB;QACjC,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CACvC,IAAI,8BAAY,CAAC;YACb,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,gBAAgB,EAAE,IAAI;YACtB,sBAAsB,EAAE,UAAU;YAClC,gBAAgB,EAAE,qCAAqC;YACvD,yBAAyB,EAAE,IAAA,wBAAQ,EAAC;gBAChC,KAAK,EAAE,QAAQ;aAClB,CAAC;SACL,CAAC,CACL,CAAC;QACF,OAAO,KAAK,CAAC,GAAG,CAAC,0BAAU,CAAC,CAAC;IACjC,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,QAAgB,EAAE,MAAc;QAC9C,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE,MAAM,EAAE,EAAE,IAAI,CAAC,CAAC;IAC1D,CAAC;;AA5NL,0CA6NC;AA5NiB,mBAAG,GAAG,mBAAmB,CAAC","sourcesContent":["import {\r\n    PutItemCommand,\r\n    GetItemCommand,\r\n    DeleteItemCommand,\r\n    QueryCommand,\r\n} from '@aws-sdk/client-dynamodb';\r\nimport { marshall, unmarshall } from '@aws-sdk/util-dynamodb';\r\nimport { Repository, Comparator } from '.';\r\nimport { DYNAMO_ENV_NAME } from '../constants';\r\nimport { IClip, ICustomDateFilter } from '../interfaces';\r\nimport { dateEst } from '../utils/dateUtils';\r\nimport {\r\n    DateExpressionMapper,\r\n    getSk,\r\n    preMarshallPrep,\r\n} from '../utils/dynamoUtils';\r\nimport { logIt } from '../utils/logItUtils';\r\n\r\nexport class ClipsRepository extends Repository {\r\n    public static gsi = 'ratedAtDate-index';\r\n\r\n    constructor(config = { region: 'us-east-2', envName: DYNAMO_ENV_NAME }) {\r\n        super(config);\r\n        this.tableName = `${config.envName}-clips`;\r\n    }\r\n\r\n    async create(createObject: IClip): Promise<Boolean> {\r\n        const {\r\n            gameName,\r\n            s3Path,\r\n            guid,\r\n            username,\r\n            source,\r\n            sourceTitle,\r\n            videoUrl,\r\n            videoLength,\r\n            sourceDescription,\r\n            tags,\r\n            duration,\r\n            resolutionHeight,\r\n            rating,\r\n            ratedAtDate,\r\n            usedInVideoAtDate,\r\n            usedInShortAtDate,\r\n            aggregatedAtDate,\r\n        } = createObject;\r\n        const filteredPut = preMarshallPrep({\r\n            pk: gameName,\r\n            sk: getSk(gameName, guid),\r\n            s3Path,\r\n            guid,\r\n            aggregatedAtDate,\r\n            username,\r\n            source,\r\n            sourceTitle,\r\n            videoUrl,\r\n            videoLength,\r\n            sourceDescription,\r\n            tags,\r\n            duration,\r\n            resolutionHeight,\r\n            rating,\r\n            ratedAtDate,\r\n            usedInVideoAtDate,\r\n            usedInShortAtDate,\r\n            createdAt: dateEst(),\r\n        });\r\n\r\n        const { $metadata } = await this.docClient\r\n            .send(\r\n                new PutItemCommand({\r\n                    TableName: this.tableName,\r\n                    Item: marshall(filteredPut),\r\n                })\r\n            )\r\n            .catch(logIt);\r\n        return $metadata.httpStatusCode === 200;\r\n    }\r\n\r\n    async put(putObject: IClip): Promise<Boolean> {\r\n        const {\r\n            gameName,\r\n            guid,\r\n            username,\r\n            s3Path,\r\n            source,\r\n            sourceTitle,\r\n            videoUrl,\r\n            sourceDescription,\r\n            tags,\r\n            duration,\r\n            resolutionHeight,\r\n            rating,\r\n            ratedAtDate,\r\n            usedInVideoAtDate,\r\n            usedInShortAtDate,\r\n            aggregatedAtDate,\r\n        } = putObject;\r\n        const filteredPut = preMarshallPrep({\r\n            pk: gameName,\r\n            sk: getSk(gameName, guid),\r\n            guid,\r\n            s3Path,\r\n            username,\r\n            source,\r\n            sourceTitle,\r\n            videoUrl,\r\n            sourceDescription,\r\n            rating,\r\n            tags,\r\n            duration,\r\n            resolutionHeight,\r\n            aggregatedAtDate,\r\n            ratedAtDate,\r\n            usedInVideoAtDate,\r\n            usedInShortAtDate,\r\n            updatedAt: dateEst(),\r\n        });\r\n\r\n        const { $metadata } = await this.docClient\r\n            .send(\r\n                new PutItemCommand({\r\n                    TableName: this.tableName,\r\n                    Item: marshall(filteredPut),\r\n                })\r\n            )\r\n            .catch(logIt);\r\n        return $metadata.httpStatusCode === 200;\r\n    }\r\n\r\n    async delete(gameName, guid): Promise<Boolean> {\r\n        const { $metadata } = await this.docClient.send(\r\n            new DeleteItemCommand({\r\n                TableName: this.tableName,\r\n                Key: marshall({ pk: gameName, sk: getSk(gameName, guid) }),\r\n            })\r\n        );\r\n        return $metadata.httpStatusCode === 200;\r\n    }\r\n\r\n    async get(gameName, guid): Promise<IClip | null> {\r\n        const { Item } = await this.docClient\r\n            .send(\r\n                new GetItemCommand({\r\n                    TableName: this.tableName,\r\n                    Key: marshall({ pk: gameName, sk: getSk(gameName, guid) }),\r\n                })\r\n            )\r\n            .catch(logIt);\r\n        if (!Item) {\r\n            console.log('No records returned for', getSk(gameName, guid));\r\n            return null;\r\n        }\r\n        return unmarshall(Item) as IClip;\r\n    }\r\n\r\n    /**\r\n     * much deeper abstraction here however I think it will be much easier to implement in the\r\n     * other repos and it is robust enough to cover all of the short term needs i foresaw.\r\n     *\r\n     * @param gameName\r\n     * @param filter YOU CAN ONLY CHOSE 1 HERE\r\n     * @param comparator\r\n     * @param minimumRating\r\n     * @param includeUsedInVideo\r\n     * @param includeUsedInShort\r\n     */\r\n    async getByCustomDate(\r\n        gameName: string,\r\n        filter: ICustomDateFilter,\r\n        comparator: Comparator, //todo this and filter can be combined in an obj, and rating can have its own comparator too\r\n        minimumRating: number = 7,\r\n        includeUsedInVideo: boolean = false,\r\n        includeUsedInShort: boolean = false\r\n    ) {\r\n        const {\r\n            FilterExpression,\r\n            ExpressionAttributeNames,\r\n            ExpressionAttributeValues,\r\n            KeyConditionExpression,\r\n        } = DateExpressionMapper(\r\n            gameName,\r\n            filter,\r\n            comparator,\r\n            minimumRating,\r\n            includeUsedInVideo,\r\n            includeUsedInShort\r\n        );\r\n        const { Items } = await this.docClient\r\n            .send(\r\n                new QueryCommand({\r\n                    TableName: this.tableName,\r\n                    ScanIndexForward: true,\r\n                    KeyConditionExpression,\r\n                    FilterExpression,\r\n                    ExpressionAttributeNames,\r\n                    ExpressionAttributeValues,\r\n                })\r\n            )\r\n            .catch(logIt);\r\n        return unmarshall(Items);\r\n    }\r\n\r\n    async getByFolder(folder: string, gameName: string): Promise<IClip[]> {\r\n        const { Items } = await this.docClient\r\n            .send(\r\n                new QueryCommand({\r\n                    TableName: this.tableName,\r\n                    ScanIndexForward: true,\r\n                    KeyConditionExpression: 'pk = :pk',\r\n                    FilterExpression: `contains(s3Path, :folder)`,\r\n                    ExpressionAttributeValues: marshall({\r\n                        ':pk': gameName,\r\n                        ':folder': folder,\r\n                    }),\r\n                })\r\n            )\r\n            .catch(logIt);\r\n        return Items.map(unmarshall);\r\n    }\r\n\r\n    async getUsedInShort(gameName: string): Promise<IClip[]> {\r\n        const { Items } = await this.docClient.send(\r\n            new QueryCommand({\r\n                TableName: this.tableName,\r\n                ScanIndexForward: true,\r\n                KeyConditionExpression: 'pk = :pk',\r\n                FilterExpression: `attribute_exists(usedInShortAtDate)`,\r\n                ExpressionAttributeValues: marshall({\r\n                    ':pk': gameName,\r\n                }),\r\n            })\r\n        );\r\n        return Items.map(unmarshall);\r\n    }\r\n\r\n    async getByS3Path(gameName: string, s3Path: string): Promise<IClip> {\r\n        return this.getByEquality(gameName, { s3Path }, true);\r\n    }\r\n}\r\n"]}